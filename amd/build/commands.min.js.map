{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_chemdraw plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2024 Aniket Kumar <aniketkj9211@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getButtonImage } from \"editor_tiny/utils\";\nimport { get_string as getString } from \"core/str\";\nimport { component, icon } from \"./common\";\nimport { ChemEmbed, insert } from \"./ui\";\nimport { notify } from \"core/notification\";\n\nconst handleAction = async (editor) => {\n  const chemImage = new ChemEmbed(editor);\n  chemImage.init();\n\n  const insertButton = document.getElementById(\"insertButton\");\n\n  if (insertButton) {\n    insertButton.addEventListener(\"click\", insert);\n  } else {\n    notify.addNotification({\n      type: \"error\",\n      message: \"Insert button not found in the DOM.\",\n    });\n  }\n};\n\nexport const getSetup = async () => {\n  try {\n    const buttonName = await getString(\"buttonName\", component);\n    const buttonImage = await getButtonImage(\"icon\", component);\n\n    return (editor) => {\n      editor.ui.registry.addIcon(icon, buttonImage.html);\n\n      editor.ui.registry.addButton(buttonName, {\n        icon,\n        tooltip: buttonName,\n        onAction: () => handleAction(editor),\n      });\n\n      editor.ui.registry.addMenuItem(buttonName, {\n        icon,\n        text: buttonName,\n        onAction: () => handleAction(editor),\n      });\n\n      editor.ui.registry.addToggleButton(buttonName, {\n        icon,\n        tooltip: buttonName,\n        onAction: () => handleAction(editor, window.json),\n        onSetup: (api) => {\n          return editor.selection.selectorChangedWithUnbind(\n            \"img:not([data-mce-object]):not([data-mce-placeholder]),figure.image\",\n            function () {\n              var node = editor.selection.getNode();\n              var parentNode = node.parentNode;\n              const html = editor.serializer.serialize(parentNode);\n              const commentMatch = html.match(/<!--(.*?)-->/);\n              if (commentMatch) {\n                try {\n                  var json = JSON.parse(commentMatch[1]);\n                  // If the comment contains valid JSON, call api.setActive and store the JSON\n                  api.setActive(true);\n                  window.json = JSON.stringify(json); // Save the JSON to window.json\n                } catch (e) {\n                  // If the comment does not contain valid JSON, call api.setActive with false\n                  api.setActive(false);\n                }\n              } else {\n                api.setActive(false);\n              }\n            }\n          ).unbind;\n        },\n      });\n    };\n  } catch (error) {\n    notify.addNotification({\n      type: \"error\",\n      message: \"Error setting up the tiny_chemdraw plugin: \" + error.message,\n    });\n    return null;\n  }\n};\n"],"names":["handleAction","async","ChemEmbed","editor","init","insertButton","document","getElementById","addEventListener","insert","addNotification","type","message","buttonName","component","buttonImage","ui","registry","addIcon","icon","html","addButton","tooltip","onAction","addMenuItem","text","addToggleButton","window","json","onSetup","api","selection","selectorChangedWithUnbind","parentNode","getNode","commentMatch","serializer","serialize","match","JSON","parse","setActive","stringify","e","unbind","error"],"mappings":";;;;;;;;MA6BMA,aAAeC,MAAAA,SACD,IAAIC,cAAUC,QACtBC,aAEJC,aAAeC,SAASC,eAAe,gBAEzCF,aACFA,aAAaG,iBAAiB,QAASC,iCAEhCC,gBAAgB,CACrBC,KAAM,QACNC,QAAS,2DAKSX,oBAEdY,iBAAmB,mBAAU,aAAcC,mBAC3CC,kBAAoB,yBAAe,OAAQD,0BAEzCX,SACNA,OAAOa,GAAGC,SAASC,QAAQC,aAAMJ,YAAYK,MAE7CjB,OAAOa,GAAGC,SAASI,UAAUR,WAAY,CACvCM,KAAAA,aACAG,QAAST,WACTU,SAAU,IAAMvB,aAAaG,UAG/BA,OAAOa,GAAGC,SAASO,YAAYX,WAAY,CACzCM,KAAAA,aACAM,KAAMZ,WACNU,SAAU,IAAMvB,aAAaG,UAG/BA,OAAOa,GAAGC,SAASS,gBAAgBb,WAAY,CAC7CM,KAAAA,aACAG,QAAST,WACTU,SAAU,IAAMvB,aAAaG,OAAQwB,OAAOC,MAC5CC,QAAUC,KACD3B,OAAO4B,UAAUC,0BACtB,uEACA,eAEMC,WADO9B,OAAO4B,UAAUG,UACND,iBAEhBE,aADOhC,OAAOiC,WAAWC,UAAUJ,YACfK,MAAM,mBAC5BH,qBAEIP,KAAOW,KAAKC,MAAML,aAAa,IAEnCL,IAAIW,WAAU,GACdd,OAAOC,KAAOW,KAAKG,UAAUd,MAC7B,MAAOe,GAEPb,IAAIW,WAAU,QAGhBX,IAAIW,WAAU,MAGlBG,UAIR,MAAOC,mCACAnC,gBAAgB,CACrBC,KAAM,QACNC,QAAS,8CAAgDiC,MAAMjC,UAE1D"}